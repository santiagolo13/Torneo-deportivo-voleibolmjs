Requerimientos no funcionales.
El proyecto elaborado requiere tener acceso a la base de datos con el nombre de voleibolmjs las 24 horas los 7 días de la semana, con el fin de garantizar dicho acceso y disponibilidad completa se tendrán en cuenta los siguientes requerimientos:
? Como requerimiento principal es mantener el funcionamiento permanente de la base de datos voleibolmjs y sus colecciones.
? Se debe replicar la base de datos, en ella deben contener tres nodos, los cuales representaran a tres servidores con el almacenamiento de la misma información.
? Cada uno de los servidores o nodos debe manejar los permisos necesarios para acceder a la información de la base de datos y replicarla.
? Cada servidor o nodo se caracterizará por un nombre, para este proyecto serán:
* “DESKTOP-4I68KFA:20000”
* “DESKTOP-4I68KFA:20001”
* “DESKTOP-4I68KFA:20002”
? En caso de que el servidor o nodo maestro no se pueda acceder el sistema nos permitirá que algún nodo secundario nos de acceso a la información si generar trauma alguno.
? El sistema debe garantizar que el ingreso, la consulta o la modificación de información se realice son contratiempos y de la forma más ágil posible.
2. Replicación de la base de datos voleibolmjs.
La replicación de la base de datos voleibolmjs está configurada en cada instancia de mongoDB así:
Nodo Primario
? Acepta las solicitudes de operaciones de escritura del cliente.
? Acepta las solicitudes de operaciones de lectura del cliente.
? Solo existirá un maestro en el conjunto de réplica.
? Si el nodo maestro sufre una falla, el conjunto que replico elige uno de los nodos secundarios para que tome la posición de nodo maestro.
Nodos Segundarios
? Replica los datos obtenidos en el nodo maestro o primario.
? Se actualiza asincrónicamente.
? Se puede configurar para que solo acepte solicitudes de lectura y denegando las solicitudes de escritura.
Diagrama de replicación:
2.1. creación de replicaset.
>Show dbs
con este comando nos permite crear el entorno de replicación.
> voleibolmjsReplicaSet=new ReplSetTest({name:"REPLICAVOLEIVOLMJS",nodes:3})
Este comando nos permitirá crear un conjunto de 3 réplicas.
El Sistema nos crea tres puertos.
> voleibolmjsReplicaSet=new ReplSetTest({name:"REPLICAVOLEIBOLMJS",nodes:3})
Con este comando inicializamos las réplicas.
voleibolmjsReplicaSet.starSet()
Con este comando veremos la configuración de cada nodo del grupo de réplica y sus conexiones, en lo siguiente vemos cada nodo y sus conexiones.
Nodo # 1:
Nodo # 2:
Nodo # 3:
Conexiones:
* “DESKTOP-4I68KFA:20000”
* “DESKTOP-4I68KFA:20001”
* “DESKTOP-4I68KFA:20002”
> voleibolmjsReplicaset.initiate()
Este comando nos permite iniciar con la replicación de los datos.
> conn=new Mongo("DESKTOP-4I68KFA:20000")
Este comando nos permite conectar al nodo #1 puerto 20000
> testDB=conn.getDB("voleibolmjs")
Nos conectamos con la base de datos voleibolmjs.
> testDB.isMaster()
Le preguntamos al nodo #1 o puerto 20000 si es el nodo principal o maestro, la respuesta es verdadero.
> use voleibolmjs; - > show collections;
Utilizamos la base de datos voleibolmjs y consultamos sus colecciones.
> testDB.Deportistas.insert({})
Con este comando ingresamos datos a la colección DEPORTISTAS en la base de datos voleibolmjs, lo estamos aplicando en el nodo principal.
> testDB.Deportistas.count();
> testDB.Deportistas.find().pretty();
Con estos comandos nos permites verificar la cantidad de información y que información insertamos en la colección que se encuentra en el nodo principal.
> connSecondary=new Mongo("DESKTOP-4I68KFA:20001")
Nos conectamos al nodo #2 con el fin para verificar que la información que insertamos en el nodo primario esta replicando en los demás nodos.
> secondaryTestDB=connSecondary.getDB("voleibolmjs")
Nos conectamos a la base de datos voleibolmjs.
> secondaryTestDB.isMaster()
Preguntamos al nodo si es el principal, la respuesta es FALSO
> secondaryTestDB.Deportistas.count()
> secondaryTestDB.Deportistas.find().pretty()
Con estos comandos verificamos que la información que ingresamos en el nodo principal se encuentra replicada en el nodo #2.
> connPrimary=new Mongo("DESKTOP-4I68KFA:20000")
> primaryDB = connPrimary.getDB(“voleibolmjs”)
Nos conectamos al nodo #1 para proceder a detenerlo, esto con el fin de realizar una simulación de fallo, con el fin de comprobar que los demás nodos quedan funcionales.
> testDB.isMaster()
Le preguntamos al nodo #1 o puerto 20000 si es el nodo principal o maestro, la respuesta es verdadero.
> primaryDB.admin.Command({shutdown:1});
Con el comando detenemos el funcionamiento del nodo #1 puerto 20000.
> connNewPrimary=new Mongo("DESKTOP-4I68KFA:20001")
Nos conectamos a un nuevo nodo primario, en este caso es el nodo #2 o puerto 20001.
> newPrimaryDB.isMaster()
Consultamos si el nuevo nodo primario, el nodo #2 es el principal o maestro, la respuesta es VERDADERO.
> voleibolmjsReplicaSet.stopSet()
Con el comando detenemos la replicación de la base de datos EVENTO DEPORTIVO.
